name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  push:
    branches: [main]

jobs:
  ci:
    name: Lint/Test/Build (fast)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Go backend
      - uses: actions/setup-go@v5
        with: { go-version: '1.24.0' }   # 与 README 要求一致
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
      - name: Prepare embedded binaries
        shell: bash
        run: ./scripts/fetch-embedded-binaries.sh --platform linux/amd64
      - name: Ensure frontend dist placeholder
        run: |
          mkdir -p frontend/dist
          touch frontend/dist/.placeholder
      - name: Generate Wails bindings
        run: wails generate module

      # Frontend
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Frontend install & lint & build
        working-directory: frontend
        run: |
          npm ci
          npm run lint --if-present
          npm run typecheck --if-present
          npm run build --if-present
      - name: Go vet & test
        run: |
          go vet ./...
          go test ./... -v

  package-preview:
    # 给 PR 打上 label: preview-binaries 才跑“真实打包”，并把包放到 Artifacts 里供你下载体验
    if: contains(toJson(github.event.pull_request.labels), 'preview-binaries')
    needs: ci
    strategy:
      matrix: { os: [macos-latest, windows-latest] }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with: { go-version: '1.24.0' }
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
      - uses: actions/setup-node@v4
        with: { node-version: '23.1.0' }

      - name: Determine build metadata
        id: meta
        shell: bash
        run: |
          version=dev
          echo "version=$version" >> "$GITHUB_OUTPUT"
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "platform=darwin/amd64" >> "$GITHUB_OUTPUT"
            echo "platform_tag=mac_intel" >> "$GITHUB_OUTPUT"
            echo "artifact=build/bin/DreamCreator_${version}_mac_intel.dmg" >> "$GITHUB_OUTPUT"
            echo "artifact_name=DreamCreator-preview-macos" >> "$GITHUB_OUTPUT"
          else
            echo "platform=windows/amd64" >> "$GITHUB_OUTPUT"
            echo "platform_tag=windows_x64" >> "$GITHUB_OUTPUT"
            echo "artifact=build/bin/Dream Creator Portable_${version}_windows_x64.zip" >> "$GITHUB_OUTPUT"
            echo "artifact_name=DreamCreator-preview-windows" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare embedded binaries
        shell: bash
        run: ./scripts/fetch-embedded-binaries.sh --platform "${{ steps.meta.outputs.platform }}"

      - name: Ensure frontend dist placeholder
        run: |
          mkdir -p frontend/dist
          touch frontend/dist/.placeholder

      - name: Generate Wails bindings
        run: wails generate module

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Build macOS app bundle
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform "${{ steps.meta.outputs.platform }}" \
            -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.meta.outputs.version }}"

      - name: Normalise macOS app name
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          app_bundle=$(find build/bin -maxdepth 1 -type d -iname 'dreamcreator.app' | head -n1)
          if [[ -z "$app_bundle" ]]; then
            echo "DreamCreator.app not found in build/bin" >&2
            exit 1
          fi
          if [[ "$app_bundle" != "build/bin/DreamCreator.app" ]]; then
            mv "$app_bundle" build/bin/DreamCreator.app
          fi

      - name: Checkout create-dmg
        if: matrix.os == 'macos-latest'
        uses: actions/checkout@v4
        with:
          repository: create-dmg/create-dmg
          path: ./build/create-dmg
          ref: master

      - name: Build macOS preview DMG
        if: matrix.os == 'macos-latest'
        shell: bash
        working-directory: ./build
        run: |
          set -euo pipefail
          dmg_name="DreamCreator_${{ steps.meta.outputs.version }}_${{ steps.meta.outputs.platform_tag }}.dmg"
          rm -f "bin/$dmg_name"
          ./create-dmg/create-dmg \
            --skip-jenkins \
            --no-internet-enable \
            --volname "DreamCreator" \
            --volicon "bin/DreamCreator.app/Contents/Resources/iconfile.icns" \
            --text-size 12 \
            --window-pos 400 400 \
            --window-size 660 450 \
            --icon-size 80 \
            --icon "DreamCreator.app" 180 180 \
            --hide-extension "DreamCreator.app" \
            --app-drop-link 480 180 \
            "bin/$dmg_name" \
            "bin"

      - name: Build Windows portable app
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform "${{ steps.meta.outputs.platform }}" \
            -webview2 embed \
            -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.meta.outputs.version }}"

      - name: Prepare Windows portable package
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: ./build/bin
        run: |
          if (-not (Test-Path "DreamCreator.exe")) {
            Write-Error "DreamCreator.exe not found in build/bin"
          }
          if (Test-Path "Dream Creator") {
            Remove-Item -Recurse -Force "Dream Creator"
          }
          Rename-Item -Path "DreamCreator.exe" -NewName "Dream Creator.exe"
          New-Item -ItemType Directory -Name "Dream Creator" | Out-Null
          Move-Item -Path "Dream Creator.exe" -Destination "Dream Creator/"

      - name: Compress Windows portable package
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: ./build/bin
        run: |
          $zipName = "Dream Creator Portable_${{ steps.meta.outputs.version }}_${{ steps.meta.outputs.platform_tag }}.zip"
          if (Test-Path $zipName) {
            Remove-Item -Force $zipName
          }
          Compress-Archive -Path "Dream Creator" -DestinationPath $zipName -Force

      - name: Upload preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: ${{ steps.meta.outputs.artifact }}
          if-no-files-found: error

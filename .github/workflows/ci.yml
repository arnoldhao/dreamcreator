name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  push:
    branches: [main]

jobs:
  ci:
    name: Lint/Test/Build (fast)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Go backend
      - uses: actions/setup-go@v5
        with: { go-version: '1.24.0' }   # 与 README 要求一致
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
      - name: Prepare embedded binaries
        shell: bash
        run: ./scripts/fetch-embedded-binaries.sh --platform linux/amd64
      - name: Ensure frontend dist placeholder
        run: |
          mkdir -p frontend/dist
          touch frontend/dist/.placeholder
      - name: Generate Wails bindings
        run: wails generate module

      # Frontend
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Frontend install & lint & build
        working-directory: frontend
        run: |
          npm ci
          npm run lint --if-present
          npm run typecheck --if-present
          npm run build --if-present
      - name: Go vet & test
        run: |
          go vet ./...
          go test ./... -v

  package-preview:
    # 给 PR 打上 label: preview-binaries 才跑“真实打包”，并把包放到 Artifacts 里供你下载体验
    if: contains(toJson(github.event.pull_request.labels), 'preview-binaries')
    needs: ci
    strategy:
      matrix: { os: [macos-latest, windows-latest] }
    runs-on: ${{ matrix.os }}
    env:
      TELEMETRYDECK_APP_ID: ${{ secrets.TELEMETRYDECK_APP_ID }}
      TELEMETRYDECK_ENDPOINT: ${{ secrets.TELEMETRYDECK_ENDPOINT }}
      WINDOWS_APP_ID: DreamCreator
      WINDOWS_APP_NAME: Dream Creator
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with: { go-version: '1.24.0' }
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1
      - uses: actions/setup-node@v4
        with: { node-version: '23.1.0' }

      - name: Determine build metadata
        id: meta
        shell: bash
        run: |
          version=dev
          echo "version=$version" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            platform="darwin/amd64"
            platform_tag="mac_intel"
            platform_name="${platform#*/}"
            echo "platform=$platform" >> "$GITHUB_OUTPUT"
            echo "platform_tag=$platform_tag" >> "$GITHUB_OUTPUT"
            echo "platform_name=$platform_name" >> "$GITHUB_OUTPUT"
            echo "artifact=build/bin/DreamCreator_${version}_${platform_tag}.dmg" >> "$GITHUB_OUTPUT"
            echo "artifact_name=DreamCreator-preview-macos" >> "$GITHUB_OUTPUT"
          else
            platform="windows/amd64"
            platform_tag="windows_x64"
            platform_name="${platform#*/}"
            echo "platform=$platform" >> "$GITHUB_OUTPUT"
            echo "platform_tag=$platform_tag" >> "$GITHUB_OUTPUT"
            echo "platform_name=$platform_name" >> "$GITHUB_OUTPUT"
            echo "artifact=build/bin/${WINDOWS_APP_NAME} Portable_${version}_${platform_tag}.zip" >> "$GITHUB_OUTPUT"
            echo "artifact_name=DreamCreator-preview-windows" >> "$GITHUB_OUTPUT"
            echo "installer_artifact=build/bin/${WINDOWS_APP_NAME} Setup_${version}_${platform_tag}.exe" >> "$GITHUB_OUTPUT"
            echo "installer_artifact_name=DreamCreator-preview-windows-installer" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Chocolatey packages (Windows)
        if: matrix.os == 'windows-latest'
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install nsis jq

      - name: Ensure NSIS available (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $nsisPath = "${env:ProgramFiles(x86)}\NSIS\Bin"
          if (-not (Test-Path (Join-Path $nsisPath 'makensis.exe'))) {
            Write-Error "makensis.exe not found in $nsisPath"
          }
          $nsisPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Prepare embedded binaries
        shell: bash
        run: ./scripts/fetch-embedded-binaries.sh --platform "${{ steps.meta.outputs.platform }}"

      - name: Ensure frontend dist placeholder
        run: |
          mkdir -p frontend/dist
          touch frontend/dist/.placeholder

      - name: Generate Wails bindings
        run: wails generate module

      - name: Ensure npm version (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: npm install -g npm@9

      - name: Update metadata for Windows build
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ steps.meta.outputs.version }}"
          jq --arg name "$WINDOWS_APP_NAME" \
             --arg out "$WINDOWS_APP_NAME" \
             '.name = $name | .outputfilename = $out | .info.productVersion = "0.0.0"' wails.json > tmp.json
          mv tmp.json wails.json
          cd frontend
          jq --arg version "$VERSION" '.version = $version' package.json > tmp.json
          mv tmp.json package.json

      - name: Build frontend
        shell: bash
        working-directory: frontend
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            npm install
          else
            npm ci
          fi
          npm run build

      - name: Build macOS app bundle
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform "${{ steps.meta.outputs.platform }}" \
            -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.meta.outputs.version }} -X dreamcreator/backend/consts.TelemetryAppID=${TELEMETRYDECK_APP_ID} -X dreamcreator/backend/consts.TelemetryEndpoint=${TELEMETRYDECK_ENDPOINT}"

      - name: Normalise macOS app name
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -euo pipefail
          app_bundle=$(find build/bin -maxdepth 1 -type d -iname 'dreamcreator.app' | head -n1)
          if [[ -z "$app_bundle" ]]; then
            echo "DreamCreator.app not found in build/bin" >&2
            exit 1
          fi
          if [[ "$app_bundle" != "build/bin/DreamCreator.app" ]]; then
            mv "$app_bundle" build/bin/DreamCreator.app
          fi

      - name: Checkout create-dmg
        if: matrix.os == 'macos-latest'
        uses: actions/checkout@v4
        with:
          repository: create-dmg/create-dmg
          path: ./build/create-dmg
          ref: master

      - name: Build macOS preview DMG
        if: matrix.os == 'macos-latest'
        shell: bash
        working-directory: ./build
        run: |
          set -euo pipefail
          dmg_name="DreamCreator_${{ steps.meta.outputs.version }}_${{ steps.meta.outputs.platform_tag }}.dmg"
          rm -f "bin/$dmg_name"
          ./create-dmg/create-dmg \
            --skip-jenkins \
            --no-internet-enable \
            --volname "DreamCreator" \
            --volicon "bin/DreamCreator.app/Contents/Resources/iconfile.icns" \
            --text-size 12 \
            --window-pos 400 400 \
            --window-size 660 450 \
            --icon-size 80 \
            --icon "DreamCreator.app" 180 180 \
            --hide-extension "DreamCreator.app" \
            --app-drop-link 480 180 \
            "bin/$dmg_name" \
            "bin"

      - name: Build Windows portable app
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform "${{ steps.meta.outputs.platform }}" \
            -webview2 embed \
            -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.meta.outputs.version }} -X dreamcreator/backend/consts.TelemetryAppID=${TELEMETRYDECK_APP_ID} -X dreamcreator/backend/consts.TelemetryEndpoint=${TELEMETRYDECK_ENDPOINT}"

      - name: Prepare Windows portable package
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: ./build/bin
        run: |
          $sourceExe = "${env:WINDOWS_APP_ID}.exe"
          $targetExe = "${env:WINDOWS_APP_NAME}.exe"
          if (Test-Path $targetExe) {
            Write-Host "Executable already renamed: $targetExe"
          } elseif (Test-Path $sourceExe) {
            Rename-Item -Path $sourceExe -NewName $targetExe
          } else {
            throw "Expected $sourceExe or $targetExe in $(Get-Location), but neither was found."
          }

          $targetDir = "${env:WINDOWS_APP_NAME}"
          if (Test-Path $targetDir) {
            Remove-Item -Path $targetDir -Recurse -Force
          }
          New-Item -ItemType Directory -Name $targetDir | Out-Null
          Move-Item -Path $targetExe -Destination $targetDir

      - name: Compress Windows portable package
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: ./build/bin
        run: |
          $folder = "${env:WINDOWS_APP_NAME}"
          $zipName = "$folder Portable_${{ steps.meta.outputs.version }}_${{ steps.meta.outputs.platform_tag }}.zip"
          if (-not (Test-Path $folder)) {
            throw "Expected portable folder '$folder' was not found in $(Get-Location)."
          }
          if (Test-Path $zipName) {
            Remove-Item -Force $zipName
          }
          Compress-Archive -Path $folder -DestinationPath $zipName -Force

      - name: Build Windows NSIS installer
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform "${{ steps.meta.outputs.platform }}" \
            -nsis -webview2 embed \
            -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.meta.outputs.version }} -X dreamcreator/backend/consts.TelemetryAppID=${TELEMETRYDECK_APP_ID} -X dreamcreator/backend/consts.TelemetryEndpoint=${TELEMETRYDECK_ENDPOINT}"

      - name: Rename Windows installer
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: ./build/bin
        run: |
          $defaultInstaller = "${env:WINDOWS_APP_ID}-${{ steps.meta.outputs.platform_name }}-installer.exe"
          $altInstaller = "${env:WINDOWS_APP_NAME}-${{ steps.meta.outputs.platform_name }}-installer.exe"
          $targetInstaller = "${env:WINDOWS_APP_NAME} Setup_${{ steps.meta.outputs.version }}_${{ steps.meta.outputs.platform_tag }}.exe"

          if (Test-Path $targetInstaller) {
            Write-Host "Installer already renamed: $targetInstaller"
            return
          }

          if (Test-Path $defaultInstaller) {
            Rename-Item -Path $defaultInstaller -NewName $targetInstaller
          } elseif (Test-Path $altInstaller) {
            Rename-Item -Path $altInstaller -NewName $targetInstaller
          } else {
            throw "Installer not found. Expected '$defaultInstaller' or '$altInstaller' in $(Get-Location)."
          }

      - name: Upload preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.artifact_name }}
          path: ${{ steps.meta.outputs.artifact }}
          if-no-files-found: error

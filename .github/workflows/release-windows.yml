name: Release Windows App

on:
  workflow_run:
    workflows: ["Publish Release"]
    types: [completed]

jobs:
  release:
    name: Release Windows App
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      TELEMETRYDECK_APP_ID: ${{ secrets.TELEMETRYDECK_APP_ID }}
      TELEMETRYDECK_ENDPOINT: ${{ secrets.TELEMETRYDECK_ENDPOINT }}
    strategy:
      matrix:
        platform:
          - windows/amd64
          # - windows/arm64 # TODO: Enable this
    steps:
      - name: Resolve release metadata
        id: release_info
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            if (!run) {
              throw new Error('workflow_run payload is missing');
            }
            const headSha = run.head_sha;
            const {owner, repo} = context.repo;
            const tags = await github.paginate(
              github.rest.repos.listTags,
              {owner, repo, per_page: 100},
            );
            const matchedTag = tags.find(tag => tag.commit && tag.commit.sha === headSha);
            if (!matchedTag) {
              throw new Error(`找不到提交 ${headSha} 对应的 tag，请确认发布流程是否创建了 tag`);
            }
            const release = await github.rest.repos.getReleaseByTag({owner, repo, tag: matchedTag.name});
            core.info(`Resolved release tag ${release.data.tag_name} for commit ${headSha}`);
            core.setOutput('tag_name', release.data.tag_name);
            core.setOutput('version', release.data.tag_name.replace(/^v/, ''));

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.release_info.outputs.tag_name }}

      - name: Normalise platform tag
        id: normalise_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g' -e 's/amd64/x64/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          # 提取架构信息用于二进制下载
          arch=$(echo ${{ matrix.platform }} | cut -d'/' -f2)
          echo "arch=$arch" >> "$GITHUB_OUTPUT"

      - name: Normalise platform name
        id: normalise_platform_name
        shell: bash
        run: |
          pname=$(echo "${{ matrix.platform }}" | sed 's/windows\///g')
          echo "pname=$pname" >> "$GITHUB_OUTPUT"

      - name: Normalise version tag
        id: normalise_version
        shell: bash
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
        run: |
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.0

      - name: Install chocolatey
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install nsis jq

      - name: Ensure NSIS available
        shell: pwsh
        run: |
          $nsisPath = "${env:ProgramFiles(x86)}\NSIS\Bin"
          if (-not (Test-Path (Join-Path $nsisPath 'makensis.exe'))) {
            Write-Error "makensis.exe not found in $nsisPath"
          }
          $nsisPath | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 23.1.0

      # 新增：下载二进制依赖文件
      - name: Download embedded binaries
        shell: bash
        run: |
          ./scripts/fetch-embedded-binaries.sh \
            --platform "${{ matrix.platform }}" \
            --ytdlp-version "$YTDLP_VERSION" \
            --ffmpeg-version "$FFMPEG_VERSION"
          echo "Downloaded binaries:"
          ls -la backend/embedded/binaries/

      - name: Build frontend assets
        shell: bash
        run: |
          npm install -g npm@9
          jq '.info.productVersion = "${{ steps.normalise_version.outputs.version }}"' wails.json > tmp.json
          mv tmp.json wails.json
          cd frontend
          jq '.version = "${{ steps.normalise_version.outputs.version }}"' package.json > tmp.json
          mv tmp.json package.json
          npm install

      - name: Build Windows portable app
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform ${{ matrix.platform }} \
          -webview2 embed \
          -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.normalise_version.outputs.version }} -X dreamcreator/backend/consts.TelemetryAppID=${TELEMETRYDECK_APP_ID} -X dreamcreator/backend/consts.TelemetryEndpoint=${TELEMETRYDECK_ENDPOINT}"

      - name: Prepare portable package
        working-directory: ./build/bin
        shell: pwsh
        run: |
          Rename-Item -Path "DreamCreator.exe" -NewName "Dream Creator.exe"
          if (Test-Path "Dream Creator") {
            Remove-Item -Path "Dream Creator" -Recurse -Force
          }
          New-Item -ItemType Directory -Name "Dream Creator" | Out-Null
          Move-Item -Path "Dream Creator.exe" -Destination "Dream Creator/"

      - name: Compress portable binary
        working-directory: ./build/bin
        shell: pwsh
        run: Compress-Archive "Dream Creator" "Dream Creator Portable_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.zip"

      - name: Upload release asset (Portable)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          files: "./build/bin/Dream Creator Portable_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.zip"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Windows NSIS installer
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform ${{ matrix.platform }} \
          -nsis -webview2 embed \
          -ldflags "-X dreamcreator/backend/consts.APP_VERSION=${{ steps.normalise_version.outputs.version }} -X dreamcreator/backend/consts.TelemetryAppID=${TELEMETRYDECK_APP_ID} -X dreamcreator/backend/consts.TelemetryEndpoint=${TELEMETRYDECK_ENDPOINT}"

      # - name: Codesign Windows NSIS installer
      #   working-directory: ./build/bin
      #   run: |
      #     echo "Creating certificate file"
      #     New-Item -ItemType directory -Path certificate
      #     Set-Content -Path certificate\certificate.txt -Value '${{ secrets.WIN_SIGNING_CERT }}'
      #     certutil -decode certificate\certificate.txt certificate\certificate.pfx
      #     echo "Signing DreamCreator installer"
      #     & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ secrets.WIN_SIGNING_CERT_PASSWORD }}' DreamCreator-${{ steps.normalise_platform_name.outputs.pname }}-installer.exe

      - name: Rename installer
        working-directory: ./build/bin
        shell: pwsh
        run: |
          Rename-Item -Path "DreamCreator-${{ steps.normalise_platform_name.outputs.pname }}-installer.exe" -NewName "Dream Creator Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe"

      - name: Upload release asset (Installer)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          files: "./build/bin/Dream Creator Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe"
          token: ${{ secrets.GITHUB_TOKEN }}
